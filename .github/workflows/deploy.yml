# .github/workflows/deploy.yml
name: ðŸš€  Deploy to EC2

on:
  pull_request:
    types: [closed]
    branches:
      - main

env:
  TARGET_DIR: /var/www/safionix
  NODE_VERSION: '20.x'
  EC2_HOST: ubuntu@ec2-34-235-146-35.compute-1.amazonaws.com

jobs:
  deploy:
    # Only run when PRs are merged, not when they're closed without merging
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout repo
      - uses: actions/checkout@v4

      # 2) Cache node_modules for faster builds
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 3) Install & build
      - run: |
          npm ci --legacy-peer-deps
          npm run build

      # 4) Compress build (lighter rsync)
      - run: |
          # Make sure package-lock.json is included for npm ci to work
          tar czf site.tgz .next public package.json package-lock.json ecosystem.config.cjs
          # add other folders you need at runtime (e.g. apps, prisma, etc.)

      - name: Add SSH key for EC2
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # 6) Upload + unpack + restart PM2
      - name: Rsync bundle & restart app
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" --delete site.tgz ${{ env.EC2_HOST }}:/tmp/site.tgz
          
          # Pass the TARGET_DIR variable explicitly to the SSH command
          ssh -o StrictHostKeyChecking=no ${{ env.EC2_HOST }} "
            set -e
            sudo mkdir -p ${{ env.TARGET_DIR }}
            sudo tar xzf /tmp/site.tgz -C ${{ env.TARGET_DIR }} --strip-components=1
            cd ${{ env.TARGET_DIR }}
          
            # Install prod dependencies (with safer fallback options)
            if [ -f package-lock.json ]; then
              # Try npm ci first (faster, more reliable when lock file exists)
              npm ci --only=production --legacy-peer-deps || npm install --only=production --legacy-peer-deps
            else
              # Fallback to regular install if no lock file
              npm install --only=production --legacy-peer-deps
            fi
          
            # Check if the app is already registered with PM2
            if pm2 list | grep -q 'safionix'; then
              pm2 reload ecosystem.config.cjs
            else
              pm2 start ecosystem.config.cjs
            fi
          
            rm /tmp/site.tgz
          "