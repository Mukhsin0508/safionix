# .github/workflows/deploy.yml
name: ðŸš€  Deploy to EC2

on:
  pull_request:
    types: [closed]
    branches:
      - main

env:
  NODE_VERSION:   '20.x'
  TARGET_DIR:     /var/www/safionix
  EC2_HOST:       ubuntu@ec2-34-235-146-35.compute-1.amazonaws.com

jobs:
  deploy:
    # only when a PR is merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # 1) checkout
      - uses: actions/checkout@v4

      # 2) node + cache
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 3) build
      - run: |
          npm ci --legacy-peer-deps
          npm run build

      # 4) pack
      - run: |
          tar czf site.tgz \
            .next public package*.json ecosystem.config.cjs

      # 5) add SSH key
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # 6) deploy + unpack + restart
      - name: Rsync & restart
        run: |
          # sync build to EC2
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            site.tgz "${EC2_HOST}:/tmp/site.tgz"

          # unpack & pm2-managed restart
          ssh -o StrictHostKeyChecking=no "${EC2_HOST}" << 'EOF'
            set -e
            sudo mkdir -p ${TARGET_DIR}
            sudo tar xzf /tmp/site.tgz \
              -C ${TARGET_DIR} --strip-components=1
            cd ${TARGET_DIR}

            # install production deps first time
            if [ ! -d node_modules ]; then
              npm ci --only=production --legacy-peer-deps
            fi

            # start or reload with PM2
            if pm2 list | grep -q 'safionix'; then
              pm2 reload ecosystem.config.cjs
            else
              pm2 start ecosystem.config.cjs
            fi

            rm /tmp/site.tgz
          EOF
